version: 2.1

parameters:
  min_desconto_usados:
    type: string
    default: "40"
  usar_historico_usados:
    type: boolean
    default: true

jobs:
  executar_scraper_usados:
    docker:
      - image: cimg/python:3.11-browsers
    environment:
      PYTHONUNBUFFERED: "1"
      MIN_DESCONTO_PERCENTUAL_USADOS: << pipeline.parameters.min_desconto_usados >>
      USAR_HISTORICO_USADOS: << pipeline.parameters.usar_historico_usados >>
      MAX_PAGINAS_USADOS_GERAL: "500" # Você mencionou que alterou isso para 2 nos logs para teste, o que é feito pela variável de ambiente
    steps:
      - checkout
      - run:
          name: Validar arquivo YAML
          command: |
            echo "Verificando existência do config.yml..."
            ls -la .circleci/config.yml
            echo "Exibindo conteúdo do config.yml..."
            cat .circleci/config.yml
            echo "Validando sintaxe YAML..."
            pip install yamllint
            yamllint .circleci/config.yml || echo "Erro na validação do YAML!"
            echo "Verificando Python e pip..."
            python --version
            pip --version
      - run:
          name: Instalar dependências Python
          command: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip show fake-useragent || echo "fake-useragent não encontrado!"
            pip list
      - restore_cache:
          name: Restaurar histórico
          keys:
            - v1-usados-historico-cache-{{ checksum "requirements.txt" }}
            - v1-usados-historico-cache-
      - run:
          name: Configurar proxy
          command: |
            echo 'export PROXY_HOST=$PROXY_HOST' >> $BASH_ENV
            echo 'export PROXY_PORT=$PROXY_PORT' >> $BASH_ENV
            echo 'export PROXY_USERNAME=$PROXY_USERNAME' >> $BASH_ENV
            echo 'export PROXY_PASSWORD=$PROXY_PASSWORD' >> $BASH_ENV
      - run:
          name: Executar Script Orquestrador
          no_output_timeout: 60m
          command: python scripts/orchestrator_usados.py
      - run:
          name: Verificar arquivos gerados
          command: |
            echo "Conteúdo de history_files_usados:"
            ls -la history_files_usados/ || echo "Diretório vazio."
            if [ -f history_files_usados/price_history_USADOS_GERAL.json ]; then
              head -n 20 history_files_usados/price_history_USADOS_GERAL.json
            else
              echo "Arquivo de histórico não encontrado."
            fi
            echo "Conteúdo de debug_logs_usados:"
            ls -la debug_logs_usados/ || echo "Diretório vazio."
            # Verifica se os dumps de página HTML estão sendo criados
            for file in debug_logs_usados/page_dump_*.html; do
              if [ -f "$file" ]; then
                echo "Arquivo de dump de página $file encontrado."
              fi
            done
            for file in debug_logs_usados/*.{png,html}; do # Mantém a verificação original também
              if [ -f "$file" ]; then
                echo "Arquivo $file encontrado."
              fi
            done
      - save_cache:
          name: Salvar histórico
          key: v1-usados-historico-cache-{{ checksum "requirements.txt" }}-{{ epoch }}
          paths:
            - history_files_usados
      - store_artifacts:
          path: history_files_usados
          destination: history_files_usados
          when: always
      - store_artifacts:
          path: debug_logs_usados # Esta seção garante que os HTMLs salvos estarão disponíveis
          destination: debug_logs_usados
          when: always

workflows:
  workflow_usados:
    jobs:
      - executar_scraper_usados
