version: 2.1

parameters:
  min_desconto_usados:
    type: string
    default: "40"
  usar_historico_usados:
    type: boolean
    default: true
  # Novo parâmetro para controlar a deleção do histórico
  apagar_historico:
    type: boolean
    default: true # Mais seguro começar com 
  # Parâmetro para o número máximo de páginas por fluxo de categoria
  max_paginas_por_fluxo:
    type: string
    default: "13" # Mantendo o valor padrão que estava no script

jobs:
  executar_scraper_usados:
    docker:
      - image: cimg/python:3.11-browsers
    environment:
      PYTHONUNBUFFERED: "1"
      MIN_DESCONTO_PERCENTUAL_USADOS: << pipeline.parameters.min_desconto_usados >>
      USAR_HISTORICO_USADOS: << pipeline.parameters.usar_historico_usados >>
      # Mapeando o novo parâmetro para a variável de ambiente correta
      APAGAR_HISTORICO_USADOS: << pipeline.parameters.apagar_historico >>
      # Atualizando o nome da variável e usando o novo parâmetro
      MAX_PAGINAS_USADOS_POR_FLUXO: << pipeline.parameters.max_paginas_por_fluxo >>
      # As variáveis de PROXY e TELEGRAM devem ser configuradas como secrets no CircleCI
      # PROXY_HOST: ${PROXY_HOST}
      # PROXY_PORT: ${PROXY_PORT}
      # PROXY_USERNAME: ${PROXY_USERNAME}
      # PROXY_PASSWORD: ${PROXY_PASSWORD}
      # TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
      # TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
    steps:
      - checkout
      - run:
          name: Validar arquivo YAML e ambiente
          command: |
            echo "Verificando existência do config.yml..."
            ls -la .circleci/config.yml
            echo "Exibindo conteúdo do config.yml..."
            cat .circleci/config.yml
            echo "Validando sintaxe YAML..."
            pip install yamllint
            yamllint .circleci/config.yml || echo "Erro na validação do YAML!"
            echo "Verificando Python e pip..."
            python --version
            pip --version
      - run:
          name: Instalar dependências Python
          command: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip show fake-useragent || echo "fake-useragent não encontrado!"
            pip list
      - restore_cache:
          name: Restaurar histórico
          keys:
            - v1-usados-historico-cache-{{ checksum "requirements.txt" }}
            # Fallback para a chave de cache mais genérica se a específica não for encontrada
            - v1-usados-historico-cache-
      - run:
          name: Configurar proxy (se aplicável via variáveis de ambiente do CircleCI)
          command: |
            # Estas variáveis devem ser definidas como Secrets no CircleCI se forem usadas
            echo 'export PROXY_HOST=${PROXY_HOST:-""}' >> $BASH_ENV
            echo 'export PROXY_PORT=${PROXY_PORT:-""}' >> $BASH_ENV
            echo 'export PROXY_USERNAME=${PROXY_USERNAME:-""}' >> $BASH_ENV
            echo 'export PROXY_PASSWORD=${PROXY_PASSWORD:-""}' >> $BASH_ENV
            echo 'export TELEGRAM_TOKEN=${TELEGRAM_TOKEN:-""}' >> $BASH_ENV
            echo 'export TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID:-""}' >> $BASH_ENV
      - run:
          name: Executar Script Orquestrador de Usados
          no_output_timeout: 60m # Aumentado para permitir execuções mais longas
          # Certifique-se que o caminho para o script está correto
          command: python scripts/orchestrator_usados.py
      - run:
          name: Verificar arquivos gerados
          command: |
            echo "Conteúdo de history_files_usados:"
            ls -la history_files_usados/ || echo "Diretório history_files_usados vazio ou não encontrado."
            if [ -f history_files_usados/price_history_USADOS_GERAL.json ]; then
              echo "Primeiras 20 linhas do histórico:"
              head -n 20 history_files_usados/price_history_USADOS_GERAL.json
            else
              echo "Arquivo de histórico price_history_USADOS_GERAL.json não encontrado."
            fi
            echo "Conteúdo de debug_logs_usados:"
            ls -la debug_logs_usados/ || echo "Diretório debug_logs_usados vazio ou não encontrado."
            # Verifica se os dumps de página HTML estão sendo criados
            find debug_logs_usados/ -name "page_dump_*.html" -print -quit || echo "Nenhum arquivo page_dump encontrado."
            find debug_logs_usados/ -name "*.png" -print -quit || echo "Nenhum arquivo PNG de debug encontrado."
          when: always # Executar este passo mesmo se anteriores falharem, para depuração
      - save_cache:
          name: Salvar histórico
          key: v1-usados-historico-cache-{{ checksum "requirements.txt" }}-{{ epoch }}
          paths:
            - history_files_usados
      - store_artifacts:
          path: history_files_usados
          destination: history_files_usados
          when: always
      - store_artifacts:
          path: debug_logs_usados
          destination: debug_logs_usados
          when: always

workflows:
  workflow_usados:
    jobs:
      - executar_scraper_usados
